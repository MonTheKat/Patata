package Presentacio;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * @autor Joan
 * @dataCreación 25/11/2014
 * @dataÚltimaModificación 28/11/2014
 */
public class VistaImportarMapaFichero extends javax.swing.JPanel {

    private CtrlPresentacio cPres;
    private String pathVertices = null;
    private String pathAristas = null;

    /**
     * Creates new form VistaMapaNuevo
     */
    public VistaImportarMapaFichero() {
        initComponents();
    }

    /**
     * Creates new form VistaMapaNuevo
     */
    public VistaImportarMapaFichero(CtrlPresentacio cpres) {
        this.cPres = cpres;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        tituloImportar = new javax.swing.JLabel();
        displayPanel = new javax.swing.JPanel();
        labelVertices = new javax.swing.JLabel();
        verticesButton = new javax.swing.JButton();
        labelAristas = new javax.swing.JLabel();
        aristasButton = new javax.swing.JButton();
        instrucciones1 = new javax.swing.JLabel();
        instrucciones2 = new javax.swing.JLabel();
        seleccionVertices = new javax.swing.JLabel();
        seleccionAristas = new javax.swing.JLabel();
        importarButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        headerPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerPanelMouseDragged(evt);
            }
        });

        tituloImportar.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        tituloImportar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloImportar.setText("Importar Mapa desde un fichero");
        tituloImportar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(tituloImportar)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(tituloImportar)
                .addContainerGap())
        );

        add(headerPanel, java.awt.BorderLayout.PAGE_START);

        labelVertices.setText("Escoge el archivo de vértices");

        verticesButton.setText("Importar Vértices");
        verticesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticesButtonActionPerformed(evt);
            }
        });

        labelAristas.setText("Ecoge el archivo de aristas");

        aristasButton.setText("Importar Aristas");
        aristasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aristasButtonActionPerformed(evt);
            }
        });

        instrucciones1.setText("Para importar un mapa de un fichero tienes que importar dos archivos.");

        instrucciones2.setText("Los dos archivos se llaman igual. Sólo cambia la última letra (V y A).");

        seleccionVertices.setText("Ningún archivo seleccionado");

        seleccionAristas.setText("Ningún archivo seleccionado");

        importarButton.setText("¡Importar Mapa!");
        importarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(instrucciones2)
                    .addComponent(instrucciones1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addComponent(aristasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(seleccionAristas))
                    .addComponent(labelAristas)
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addComponent(verticesButton)
                        .addGap(18, 18, 18)
                        .addComponent(seleccionVertices))
                    .addComponent(labelVertices)
                    .addComponent(importarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(instrucciones1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instrucciones2)
                .addGap(58, 58, 58)
                .addComponent(labelVertices)
                .addGap(18, 18, 18)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verticesButton)
                    .addComponent(seleccionVertices))
                .addGap(39, 39, 39)
                .addComponent(labelAristas)
                .addGap(18, 18, 18)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aristasButton)
                    .addComponent(seleccionAristas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(importarButton)
                .addGap(55, 55, 55))
        );

        add(displayPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void verticesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticesButtonActionPerformed
        JFileChooser fileVertices = new JFileChooser();
        fileVertices.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fileVertices.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { //esto debería evitar el nullPointerException
            File vertices = fileVertices.getSelectedFile();
            String pathV = vertices.getAbsolutePath();
            //Miramos si es un fichero de vértices
            int indiceLetra = pathV.length() - 1;
            char letra = pathV.charAt(indiceLetra);
            if (letra == 'V') {
                this.pathVertices = pathV.substring(0, pathV.length() - 1);
                seleccionVertices.setText(pathV);
            } else {
                JOptionPane.showMessageDialog(null, "El fichero seleccionado no corresponde a uno de vértices");
            }
        }
    }//GEN-LAST:event_verticesButtonActionPerformed

    private void importarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarButtonActionPerformed
        if (this.pathAristas != null && this.pathVertices != null) {
            if (this.pathAristas.equals(this.pathVertices)) {
                if (this.cPres.hayMapaCargado()) {
                    this.cPres.reinicioTotal();
                    JOptionPane.showMessageDialog(null, "Se ha eliminado el mapa que había cargado");
                }
                boolean creado = this.cPres.importarFichero(this.pathVertices);
                if (!creado) {
                    JOptionPane.showMessageDialog(null, "Ya hay un mapa cargado en el sistema");
                } else {
                    JOptionPane.showMessageDialog(null, "El mapa se ha importado correctamente");
                    this.cPres.avisoMapaCreado();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Los archivos no corresponden al mismo mapa");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona dos archivos");
        }
    }//GEN-LAST:event_importarButtonActionPerformed

    private void aristasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aristasButtonActionPerformed
        JFileChooser fileAristas = new JFileChooser();
        fileAristas.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fileAristas.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File aristas = fileAristas.getSelectedFile();
            String pathA = aristas.getAbsolutePath();
            //Miramos si es un fichero de aristas
            int indiceLetra = pathA.length() - 1;
            char letra = pathA.charAt(indiceLetra);
            if (letra == 'A') {
                this.pathAristas = pathA.substring(0, pathA.length() - 1);
                seleccionAristas.setText(pathA);
            } else {
                JOptionPane.showMessageDialog(null, "El fichero seleccionado no corresponde a uno de aristas");
            }
        }
    }//GEN-LAST:event_aristasButtonActionPerformed

    private void headerPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanelMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_headerPanelMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aristasButton;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton importarButton;
    private javax.swing.JLabel instrucciones1;
    private javax.swing.JLabel instrucciones2;
    private javax.swing.JLabel labelAristas;
    private javax.swing.JLabel labelVertices;
    private javax.swing.JLabel seleccionAristas;
    private javax.swing.JLabel seleccionVertices;
    private javax.swing.JLabel tituloImportar;
    private javax.swing.JButton verticesButton;
    // End of variables declaration//GEN-END:variables
}
